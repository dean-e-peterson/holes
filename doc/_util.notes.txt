Comments from and notes on holes/_util.py

holes/_util.py, printlog()
Rationale for creating a printlog function instead of
running normal output through the logging infrastructure.
    Note: {{{
    Instead of combining printing and logging like this,
    you could always make logging calls instead of print calls
    in your code, and configure the logger with two handlers,
    one to log to file, and one (StreamHandler?) to log to
    console outout.  You could even set the handlers to
    different log level thresholds so that one handler would
    only output more important stuff.
    However,
    using the logging infrastructure for normal output could
    hurt maintainability by being more opaque and surprising.
    Also, to me, normal output didn't fit cleanly in their
    standard log level scheme (DEBUG, INFO, WARNING, etc.),
    especially if I normally wanted to output data to console
    (not WARNING, so INFO?), and log that output plus more,
    even before kicking in some debug or verbose logging.
    So I would need to add at least one custom log level
    between DEBUG and INFO.  This should be pretty easy,
    but the python docs recommend against libraries defining
    their own levels, so do I want to get in that habit?
    I concluded that seemed clearer to write a small function
    that explicitly showed what I wanted, that is,
    I want to print something ... and log it.
    On the other hand,
    perhaps it would be cleaner to use the logging infrastructure,
    but using normal print function printing to a stream split
    to go to both STDOUT and to the loggin infrastructure? }}}

